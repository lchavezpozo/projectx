version: '3.8'

services:
  # Servicio de desarrollo
  dev:
    build:
      context: .
      target: builder
    command: npm run dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NODE_ENV=development
    networks:
      - agendia-network
    depends_on:
      postgres:
        condition: service_healthy

  # Servicio de producci√≥n (puede usar imagen local o del registry)
  prod:
    image: ${PROD_IMAGE:-}
    build:
      context: .
      target: runner
    command: node server.js
    ports:
      - "3001:3001"
      - "5555:5555"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NODE_ENV=production
    networks:
      - agendia-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Servicio de base de datos
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agendia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  agendia-network:
    driver: bridge

volumes:
  postgres_data: 
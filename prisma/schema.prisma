// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemRole {
  SUPER_ADMIN      // Acceso total al sistema
  SYSTEM_ADMIN     // Administración del sistema
  SUPPORT_ADMIN    // Soporte a usuarios y empresas
  FINANCE_ADMIN    // Gestión de suscripciones y pagos
}

enum CompanyRole {
  OWNER
  ADMIN 
  STAFF      // solo estos pueden tener entrada en `Staff`
  CLIENT     // solo estos pueden tener entrada en `Client`
}

model Company {
  id          String    @id @default(cuid())
  name        String
  timezone    String    @default("UTC") // Ejemplo: "America/Mexico_City"
  branches    Branch[] // para revisar nombre Locations 
  members     CompanyMember[]
  subscription Subscription?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Branch {
  id          String    @id @default(cuid())
  name        String
  address     String
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  services    ServiceBranch[]
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([companyId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  phone         String?
  systemRole    SystemRole?
  companies     CompanyMember[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Staff {
  id          String    @id @default(cuid())
  companyMemberId String @unique
  companyMember CompanyMember @relation(fields: [companyMemberId], references: [id])
  services    ServiceProvider[] // ServiceBranch
  absences    StaffAbsence[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([companyMemberId])
}

model Client {
  id          String    @id @default(cuid())
  companyMemberId String @unique
  companyMember CompanyMember @relation(fields: [companyMemberId], references: [id])
  bookings    Booking[] @relation("ClientBookings")
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([companyMemberId])
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  duration    Int       // duración en minutos
  basePrice   Float     // precio base sugerido del servicio
  branches    ServiceBranch[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ServiceBranch {
  id          String    @id @default(cuid())
  serviceId   String
  branchId    String
  price       Float     // precio específico en esta sucursal
  service     Service   @relation(fields: [serviceId], references: [id])
  branch      Branch    @relation(fields: [branchId], references: [id])
  providers   ServiceProvider[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([serviceId, branchId])
  @@index([serviceId])
  @@index([branchId])
}

model ServiceProvider {
  id          String    @id @default(cuid())
  serviceBranchId String
  staffId     String
  price       Float     // precio específico que cobra este profesional
  serviceBranch ServiceBranch @relation(fields: [serviceBranchId], references: [id])
  staff       Staff     @relation(fields: [staffId], references: [id])
  bookings    Booking[]
  availabilitySlots AvailabilitySlot[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([serviceBranchId, staffId])
  @@index([serviceBranchId])
  @@index([staffId])
}

model Booking {
  id          String    @id @default(cuid())
  clientId    String
  serviceProviderId String
  branchId    String
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  client      Client    @relation("ClientBookings", fields: [clientId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  branch      Branch    @relation(fields: [branchId], references: [id])
  review      Review?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([clientId])
  @@index([serviceProviderId])
  @@index([branchId])
  @@index([startTime])
}

model CompanyMember {
  id          String    @id @default(cuid())
  userId      String 
  companyId   String
  role        CompanyRole @default(CLIENT)
  user        User      @relation(fields: [userId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])
  staff       Staff?
  client      Client?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Subscription {
  id          String    @id @default(cuid())
  companyId   String    @unique
  company     Company   @relation(fields: [companyId], references: [id])
  plan        SubscriptionPlan
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime
  maxUsers    Int
  maxBranches Int
  features    Json      // características específicas del plan
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AvailabilityTemplate {
  id        String   @id @default(cuid())
  name      String
  isActive  Boolean  @default(false)
  slots     AvailabilitySlot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model AvailabilitySlot {
  id              String   @id @default(cuid())
  templateId      String
  serviceProviderId String
  weekday         Weekday
  startTime       String   // Formato: "HH:mm" en 24h 8:00
  endTime         String   // Formato: "HH:mm" en 24h 09:00
  template        AvailabilityTemplate @relation(fields: [templateId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([templateId, weekday])
  @@index([serviceProviderId])
  @@unique([templateId, serviceProviderId, weekday, startTime, endTime])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
}

enum AbsenceType {
  VACATION
  SICK_LEAVE
  PERSONAL_DAY
  HOLIDAY
  OTHER
}

model StaffAbsence {
  id          String      @id @default(cuid())
  staffId     String // 
  type        AbsenceType
  startDate   DateTime
  endDate     DateTime
  description String?
  isApproved  Boolean     @default(false)
  staff       Staff       @relation(fields: [staffId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([staffId])
  @@index([startDate, endDate])
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLATION
  BOOKING_RESCHEDULE
  REVIEW_REQUEST
  PROMOTION
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
}

model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  channel     NotificationChannel
  recipientId String
  title       String
  content     String
  isRead      Boolean          @default(false)
  metadata    Json?            // Datos adicionales específicos de la notificación
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([recipientId])
  @@index([type])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Rating {
  ONE_STAR
  TWO_STARS
  THREE_STARS
  FOUR_STARS
  FIVE_STARS
}

model Review {
  id          String        @id @default(cuid())
  bookingId   String        @unique
  clientId    String
  rating      Rating
  comment     String?
  status      ReviewStatus  @default(PENDING)
  booking     Booking       @relation(fields: [bookingId], references: [id])
  client      Client        @relation(fields: [clientId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([clientId])
  @@index([status])
}
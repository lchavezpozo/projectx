name: Release

on:
  push:
    branches: [ main, master ]

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release)') }}
    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm ci

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configurar git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Obtener la última version
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Determinar el tipo de release basado en commits
        if git log $LATEST_TAG..HEAD --pretty=format:"%s" | grep -q "feat\|feature"; then
          RELEASE_TYPE="minor"
        elif git log $LATEST_TAG..HEAD --pretty=format:"%s" | grep -q "fix\|bugfix"; then
          RELEASE_TYPE="patch"
        elif git log $LATEST_TAG..HEAD --pretty=format:"%s" | grep -q "BREAKING CHANGE\|!:"; then
          RELEASE_TYPE="major"
        else
          RELEASE_TYPE="patch"
        fi
        
        # Calcular nueva versión
        CURRENT_VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        case $RELEASE_TYPE in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
        esac
        
        NEW_TAG="v$NEW_VERSION"
        
        # Crear changelog
        echo "# Changelog for $NEW_TAG" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Changes since $LATEST_TAG" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
        
        # Crear tag y release
        git tag -a $NEW_TAG -m "Release $NEW_TAG"
        git push origin $NEW_TAG
        
        # Crear release en GitHub
        gh release create $NEW_TAG \
          --title "Release $NEW_TAG" \
          --notes-file CHANGELOG.md \
          --generate-notes
        
        echo "Created release: $NEW_TAG" 